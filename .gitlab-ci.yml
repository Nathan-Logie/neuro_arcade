
stages:          # List of stages for jobs, and their order of execution
  - build
  - serverFix
  - django
  - reactCreation
  - react

variables:
  PYTHON_VERSION: "3.11.5"
  MYSQL_DATABASE: $MYSQL_DB
  MYSQL_ROOT_PASSWORD: $MYSQL_PASS
  MYSQL_USER: $MYSQL_USER
  MYSQL_PASSWORD: $MYSQL_PASS




build-job:
  image: python:latest       # This job runs in the build stage, which runs first. It sets up the virtual environment in order to run the tests
  stage: build
  before_script:
  # - apt-get install -y python 3.11.5
  # - update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11.5
  - python -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

server-job:
  image: python:latest
  stage: serverFix
  script:
    - python neuro_arcade/manage.py makemigrations
    - python neuro_arcade/manage.py migrate
    - python neuro_arcade/manage.py check


unit-test-job: 
  image: python:latest 
  stage: django
  script:
    - python neuro_arcade/manage.py test
    - echo "Django Unit Tests Ran"
  only:
    - branches
  except:
    - main

lint-test-job:   # This job also runs in the test stage.
  stage: django
  image: python:latest
  allow_failure: true    # It can run at the same time as unit-test-job (in parallel).
  script:
  # - find . -type f -name '*.py' ! -path '*/migrations/*' -exec autopep8 --in-place --aggressive --aggressive '{}' \;
  - pylint $(git ls-files '*.py')

react-creation:
  stage: reactCreation
  image: npm:latest
  script:
    - cd neuro_arcade
    - cd reactapp
    - npm install --force




unit-test-r-job:
  stage: react
  image: npm:latest
  script:
    - npm test
    - npm test--coverage
  
lint-test-r-job:
  stage: react
  allow_failure: true 
  image: npm:latest
  script:
    -npm lint
    




